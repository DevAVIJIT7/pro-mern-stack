{"version":3,"sources":["../server/server.js"],"names":["app","use","static","json","issues","db","connect","then","connection","listen","console","log","catch","error","get","req","res","collection","find","toArray","metadata","total_count","length","_metadata","records","status","message","post","newIssue","body","created","Date","err","validateIssue","insertOne","_id","result","insertedId","limit","next"],"mappings":";;AAAA;;;;AACA;;;;AACA;;AACA;;;;AACA;;;;AAEA,IAAMA,MAAM,wBAAZ;AACAA,IAAIC,GAAJ,CAAQ,kBAAQC,MAAR,CAAe,QAAf,CAAR;AACAF,IAAIC,GAAJ,CAAQ,qBAAWE,IAAX,EAAR;;AAEA,IAAMC,SAAS,EAAf;;AAEA,IAAIC,WAAJ;AACA,qBAAYC,OAAZ,CAAoB,kCAApB,EAAwDC,IAAxD,CAA6D,sBAAc;AACzEF,OAAKG,UAAL;AACAR,MAAIS,MAAJ,CAAW,IAAX,EAAiB,YAAY;AAC3BC,YAAQC,GAAR,CAAY,0BAAZ;AACD,GAFD;AAGD,CALD,EAKGC,KALH,CAKS,iBAAS;AAChBF,UAAQC,GAAR,CAAY,QAAZ,EAAsBE,KAAtB;AACD,CAPD;;AASAb,IAAIc,GAAJ,CAAQ,aAAR,EAAuB,UAACC,GAAD,EAAMC,GAAN,EAAc;AACnCX,KAAGY,UAAH,CAAc,QAAd,EAAwBC,IAAxB,GAA+BC,OAA/B,GAAyCZ,IAAzC,CAA8C,kBAAU;AACtD,QAAMa,WAAW,EAAEC,aAAajB,OAAOkB,MAAtB,EAAjB;AACAN,QAAIb,IAAJ,CAAS,EAAEoB,WAAWH,QAAb,EAAuBI,SAASpB,MAAhC,EAAT;AACD,GAHD,EAGGQ,KAHH,CAGS,iBAAS;AAChBF,YAAQC,GAAR,CAAYE,KAAZ;AACAG,QAAIS,MAAJ,CAAW,GAAX,EAAgBtB,IAAhB,CAAqB,EAAEuB,qCAAmCb,KAArC,EAArB;AACD,GAND;AAOD,CARD;;AAUAb,IAAI2B,IAAJ,CAAS,aAAT,EAAwB,UAACZ,GAAD,EAAMC,GAAN,EAAc;AACpC,MAAMY,WAAWb,IAAIc,IAArB;AACAD,WAASE,OAAT,GAAmB,IAAIC,IAAJ,EAAnB;AACA,MAAI,CAACH,SAASH,MAAd,EACEG,SAASH,MAAT,GAAkB,KAAlB;AACA,MAAMO,MAAM,gBAAMC,aAAN,CAAoBL,QAApB,CAAZ;AACF,MAAII,GAAJ,EAAS;AACPhB,QAAIS,MAAJ,CAAW,GAAX,EAAgBtB,IAAhB,CAAqB,EAAEuB,gCAA8BM,GAAhC,EAArB;AACA;AACA;AACF3B,KAAGY,UAAH,CAAc,QAAd,EAAwBiB,SAAxB,CAAkCN,QAAlC,EAA4CrB,IAA5C,CAAiD;AAAA,WAC/CF,GAAGY,UAAH,CAAc,QAAd,EAAwBC,IAAxB,CAA6B,EAAEiB,KAAKC,OAAOC,UAAd,EAA7B,EAAyDC,KAAzD,CAA+D,CAA/D,EAAkEC,IAAlE,EAD+C;AAAA,GAAjD,EAEEhC,IAFF,CAEO,oBAAY;AACjBS,QAAIb,IAAJ,CAASyB,QAAT;AACD,GAJD,EAIGhB,KAJH,CAIS,iBAAS;AAChBF,YAAQC,GAAR,CAAYE,KAAZ;AACAG,QAAIS,MAAJ,CAAW,GAAX,EAAgBtB,IAAhB,CAAqB,EAAEuB,qCAAmCb,KAArC,EAArB;AACD,GAPD;AAQD,CAlBD","file":"server.js","sourcesContent":["import express from 'express';\nimport bodyParser from 'body-parser';\nimport { MongoClient } from 'mongodb';\nimport Issue from './issue.js';\nimport 'babel-polyfill';\n\nconst app = express();\napp.use(express.static('static'));\napp.use(bodyParser.json());\n\nconst issues = [];\n\nlet db;\nMongoClient.connect('mongodb://localhost/issuetracker').then(connection => {\n  db = connection;\n  app.listen(3000, function () {\n    console.log(\"App started on Port 3000\");\n  });\n}).catch(error => {\n  console.log('Error:', error);\n});\n\napp.get('/api/issues', (req, res) => {\n  db.collection('issues').find().toArray().then(issues => {\n    const metadata = { total_count: issues.length };\n    res.json({ _metadata: metadata, records: issues })\n  }).catch(error => {\n    console.log(error);\n    res.status(500).json({ message: `Internal Server Error: ${error}` });\n  });\n});\n\napp.post('/api/issues', (req, res) => {\n  const newIssue = req.body;\n  newIssue.created = new Date();\n  if (!newIssue.status)\n    newIssue.status = 'New';\n    const err = Issue.validateIssue(newIssue)\n  if (err) {\n    res.status(422).json({ message: `Invalid requrest: ${err}` });\n    return;\n   }\n  db.collection('issues').insertOne(newIssue).then(result =>\n    db.collection('issues').find({ _id: result.insertedId }).limit(1).next()\n  ).then(newIssue => {\n    res.json(newIssue);\n  }).catch(error => {\n    console.log(error);\n    res.status(500).json({ message: `Internal Server Error: ${error}` });\n  });\n});\n  \n"]}